// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: video/sfu/event/events.proto

package event

import (
	models "github.com/GetStream/protocol/protobuf/video/sfu/models"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SFUEvent is a message that is sent from the SFU to the client.
type SfuEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to EventPayload:
	//
	//	*SfuEvent_SubscriberOffer
	//	*SfuEvent_PublisherAnswer
	//	*SfuEvent_ConnectionQualityChanged
	//	*SfuEvent_AudioLevelChanged
	//	*SfuEvent_IceTrickle
	//	*SfuEvent_ChangePublishQuality
	//	*SfuEvent_ParticipantJoined
	//	*SfuEvent_ParticipantLeft
	//	*SfuEvent_DominantSpeakerChanged
	//	*SfuEvent_JoinResponse
	//	*SfuEvent_HealthCheckResponse
	//	*SfuEvent_TrackPublished
	//	*SfuEvent_TrackUnpublished
	//	*SfuEvent_Error
	//	*SfuEvent_CallGrantsUpdated
	EventPayload isSfuEvent_EventPayload `protobuf_oneof:"event_payload"`
}

func (x *SfuEvent) Reset() {
	*x = SfuEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SfuEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SfuEvent) ProtoMessage() {}

func (x *SfuEvent) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SfuEvent.ProtoReflect.Descriptor instead.
func (*SfuEvent) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{0}
}

func (m *SfuEvent) GetEventPayload() isSfuEvent_EventPayload {
	if m != nil {
		return m.EventPayload
	}
	return nil
}

func (x *SfuEvent) GetSubscriberOffer() *SubscriberOffer {
	if x, ok := x.GetEventPayload().(*SfuEvent_SubscriberOffer); ok {
		return x.SubscriberOffer
	}
	return nil
}

func (x *SfuEvent) GetPublisherAnswer() *PublisherAnswer {
	if x, ok := x.GetEventPayload().(*SfuEvent_PublisherAnswer); ok {
		return x.PublisherAnswer
	}
	return nil
}

func (x *SfuEvent) GetConnectionQualityChanged() *ConnectionQualityChanged {
	if x, ok := x.GetEventPayload().(*SfuEvent_ConnectionQualityChanged); ok {
		return x.ConnectionQualityChanged
	}
	return nil
}

func (x *SfuEvent) GetAudioLevelChanged() *AudioLevelChanged {
	if x, ok := x.GetEventPayload().(*SfuEvent_AudioLevelChanged); ok {
		return x.AudioLevelChanged
	}
	return nil
}

func (x *SfuEvent) GetIceTrickle() *models.ICETrickle {
	if x, ok := x.GetEventPayload().(*SfuEvent_IceTrickle); ok {
		return x.IceTrickle
	}
	return nil
}

func (x *SfuEvent) GetChangePublishQuality() *ChangePublishQuality {
	if x, ok := x.GetEventPayload().(*SfuEvent_ChangePublishQuality); ok {
		return x.ChangePublishQuality
	}
	return nil
}

func (x *SfuEvent) GetParticipantJoined() *ParticipantJoined {
	if x, ok := x.GetEventPayload().(*SfuEvent_ParticipantJoined); ok {
		return x.ParticipantJoined
	}
	return nil
}

func (x *SfuEvent) GetParticipantLeft() *ParticipantLeft {
	if x, ok := x.GetEventPayload().(*SfuEvent_ParticipantLeft); ok {
		return x.ParticipantLeft
	}
	return nil
}

func (x *SfuEvent) GetDominantSpeakerChanged() *DominantSpeakerChanged {
	if x, ok := x.GetEventPayload().(*SfuEvent_DominantSpeakerChanged); ok {
		return x.DominantSpeakerChanged
	}
	return nil
}

func (x *SfuEvent) GetJoinResponse() *JoinResponse {
	if x, ok := x.GetEventPayload().(*SfuEvent_JoinResponse); ok {
		return x.JoinResponse
	}
	return nil
}

func (x *SfuEvent) GetHealthCheckResponse() *HealthCheckResponse {
	if x, ok := x.GetEventPayload().(*SfuEvent_HealthCheckResponse); ok {
		return x.HealthCheckResponse
	}
	return nil
}

func (x *SfuEvent) GetTrackPublished() *TrackPublished {
	if x, ok := x.GetEventPayload().(*SfuEvent_TrackPublished); ok {
		return x.TrackPublished
	}
	return nil
}

func (x *SfuEvent) GetTrackUnpublished() *TrackUnpublished {
	if x, ok := x.GetEventPayload().(*SfuEvent_TrackUnpublished); ok {
		return x.TrackUnpublished
	}
	return nil
}

func (x *SfuEvent) GetError() *Error {
	if x, ok := x.GetEventPayload().(*SfuEvent_Error); ok {
		return x.Error
	}
	return nil
}

func (x *SfuEvent) GetCallGrantsUpdated() *CallGrantsUpdated {
	if x, ok := x.GetEventPayload().(*SfuEvent_CallGrantsUpdated); ok {
		return x.CallGrantsUpdated
	}
	return nil
}

type isSfuEvent_EventPayload interface {
	isSfuEvent_EventPayload()
}

type SfuEvent_SubscriberOffer struct {
	SubscriberOffer *SubscriberOffer `protobuf:"bytes,1,opt,name=subscriber_offer,json=subscriberOffer,proto3,oneof"`
}

type SfuEvent_PublisherAnswer struct {
	PublisherAnswer *PublisherAnswer `protobuf:"bytes,2,opt,name=publisher_answer,json=publisherAnswer,proto3,oneof"`
}

type SfuEvent_ConnectionQualityChanged struct {
	ConnectionQualityChanged *ConnectionQualityChanged `protobuf:"bytes,3,opt,name=connection_quality_changed,json=connectionQualityChanged,proto3,oneof"`
}

type SfuEvent_AudioLevelChanged struct {
	AudioLevelChanged *AudioLevelChanged `protobuf:"bytes,4,opt,name=audio_level_changed,json=audioLevelChanged,proto3,oneof"`
}

type SfuEvent_IceTrickle struct {
	IceTrickle *models.ICETrickle `protobuf:"bytes,5,opt,name=ice_trickle,json=iceTrickle,proto3,oneof"`
}

type SfuEvent_ChangePublishQuality struct {
	ChangePublishQuality *ChangePublishQuality `protobuf:"bytes,6,opt,name=change_publish_quality,json=changePublishQuality,proto3,oneof"`
}

type SfuEvent_ParticipantJoined struct {
	ParticipantJoined *ParticipantJoined `protobuf:"bytes,10,opt,name=participant_joined,json=participantJoined,proto3,oneof"`
}

type SfuEvent_ParticipantLeft struct {
	ParticipantLeft *ParticipantLeft `protobuf:"bytes,11,opt,name=participant_left,json=participantLeft,proto3,oneof"`
}

type SfuEvent_DominantSpeakerChanged struct {
	DominantSpeakerChanged *DominantSpeakerChanged `protobuf:"bytes,12,opt,name=dominant_speaker_changed,json=dominantSpeakerChanged,proto3,oneof"`
}

type SfuEvent_JoinResponse struct {
	JoinResponse *JoinResponse `protobuf:"bytes,13,opt,name=join_response,json=joinResponse,proto3,oneof"`
}

type SfuEvent_HealthCheckResponse struct {
	HealthCheckResponse *HealthCheckResponse `protobuf:"bytes,14,opt,name=health_check_response,json=healthCheckResponse,proto3,oneof"`
}

type SfuEvent_TrackPublished struct {
	TrackPublished *TrackPublished `protobuf:"bytes,16,opt,name=track_published,json=trackPublished,proto3,oneof"`
}

type SfuEvent_TrackUnpublished struct {
	TrackUnpublished *TrackUnpublished `protobuf:"bytes,17,opt,name=track_unpublished,json=trackUnpublished,proto3,oneof"`
}

type SfuEvent_Error struct {
	Error *Error `protobuf:"bytes,18,opt,name=error,proto3,oneof"`
}

type SfuEvent_CallGrantsUpdated struct {
	CallGrantsUpdated *CallGrantsUpdated `protobuf:"bytes,19,opt,name=call_grants_updated,json=callGrantsUpdated,proto3,oneof"`
}

func (*SfuEvent_SubscriberOffer) isSfuEvent_EventPayload() {}

func (*SfuEvent_PublisherAnswer) isSfuEvent_EventPayload() {}

func (*SfuEvent_ConnectionQualityChanged) isSfuEvent_EventPayload() {}

func (*SfuEvent_AudioLevelChanged) isSfuEvent_EventPayload() {}

func (*SfuEvent_IceTrickle) isSfuEvent_EventPayload() {}

func (*SfuEvent_ChangePublishQuality) isSfuEvent_EventPayload() {}

func (*SfuEvent_ParticipantJoined) isSfuEvent_EventPayload() {}

func (*SfuEvent_ParticipantLeft) isSfuEvent_EventPayload() {}

func (*SfuEvent_DominantSpeakerChanged) isSfuEvent_EventPayload() {}

func (*SfuEvent_JoinResponse) isSfuEvent_EventPayload() {}

func (*SfuEvent_HealthCheckResponse) isSfuEvent_EventPayload() {}

func (*SfuEvent_TrackPublished) isSfuEvent_EventPayload() {}

func (*SfuEvent_TrackUnpublished) isSfuEvent_EventPayload() {}

func (*SfuEvent_Error) isSfuEvent_EventPayload() {}

func (*SfuEvent_CallGrantsUpdated) isSfuEvent_EventPayload() {}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *models.Error `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{1}
}

func (x *Error) GetError() *models.Error {
	if x != nil {
		return x.Error
	}
	return nil
}

// SfuRequest is a message that is sent from the client to the SFU.
type SfuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RequestPayload:
	//
	//	*SfuRequest_JoinRequest
	//	*SfuRequest_HealthCheckRequest
	RequestPayload isSfuRequest_RequestPayload `protobuf_oneof:"request_payload"`
}

func (x *SfuRequest) Reset() {
	*x = SfuRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SfuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SfuRequest) ProtoMessage() {}

func (x *SfuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SfuRequest.ProtoReflect.Descriptor instead.
func (*SfuRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{2}
}

func (m *SfuRequest) GetRequestPayload() isSfuRequest_RequestPayload {
	if m != nil {
		return m.RequestPayload
	}
	return nil
}

func (x *SfuRequest) GetJoinRequest() *JoinRequest {
	if x, ok := x.GetRequestPayload().(*SfuRequest_JoinRequest); ok {
		return x.JoinRequest
	}
	return nil
}

func (x *SfuRequest) GetHealthCheckRequest() *HealthCheckRequest {
	if x, ok := x.GetRequestPayload().(*SfuRequest_HealthCheckRequest); ok {
		return x.HealthCheckRequest
	}
	return nil
}

type isSfuRequest_RequestPayload interface {
	isSfuRequest_RequestPayload()
}

type SfuRequest_JoinRequest struct {
	JoinRequest *JoinRequest `protobuf:"bytes,1,opt,name=join_request,json=joinRequest,proto3,oneof"`
}

type SfuRequest_HealthCheckRequest struct {
	HealthCheckRequest *HealthCheckRequest `protobuf:"bytes,2,opt,name=health_check_request,json=healthCheckRequest,proto3,oneof"`
}

func (*SfuRequest_JoinRequest) isSfuRequest_RequestPayload() {}

func (*SfuRequest_HealthCheckRequest) isSfuRequest_RequestPayload() {}

type HealthCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HealthCheckRequest) Reset() {
	*x = HealthCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckRequest) ProtoMessage() {}

func (x *HealthCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckRequest.ProtoReflect.Descriptor instead.
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{3}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParticipantCount *models.ParticipantCount `protobuf:"bytes,1,opt,name=participant_count,json=participantCount,proto3" json:"participant_count,omitempty"`
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{4}
}

func (x *HealthCheckResponse) GetParticipantCount() *models.ParticipantCount {
	if x != nil {
		return x.ParticipantCount
	}
	return nil
}

// TrackPublished is sent when a track is published by a participant
// or a previously muted track is unmuted to resume it.
type TrackPublished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string           `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string           `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Type      models.TrackType `protobuf:"varint,3,opt,name=type,proto3,enum=stream.video.sfu.models.TrackType" json:"type,omitempty"`
	// Participant information here is included as an optimisation
	// for large calls where broadcasting on every participant join
	// is expensive. You should **NOT** assume that this will always
	// be available though you can use it to update the participant
	// list when it is there.
	Participant *models.Participant `protobuf:"bytes,4,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (x *TrackPublished) Reset() {
	*x = TrackPublished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackPublished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackPublished) ProtoMessage() {}

func (x *TrackPublished) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackPublished.ProtoReflect.Descriptor instead.
func (*TrackPublished) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{5}
}

func (x *TrackPublished) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackPublished) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TrackPublished) GetType() models.TrackType {
	if x != nil {
		return x.Type
	}
	return models.TrackType(0)
}

func (x *TrackPublished) GetParticipant() *models.Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

// TrackUnpublished is sent when a track which was previously published is muted.
// The `cause` field indicates why the track was muted.
type TrackUnpublished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string                      `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string                      `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Type      models.TrackType            `protobuf:"varint,3,opt,name=type,proto3,enum=stream.video.sfu.models.TrackType" json:"type,omitempty"`
	Cause     models.TrackUnpublishReason `protobuf:"varint,4,opt,name=cause,proto3,enum=stream.video.sfu.models.TrackUnpublishReason" json:"cause,omitempty"`
	// Participant information here is included as an optimisation
	// for large calls where broadcasting on every participant join
	// is expensive. You should **NOT** assume that this will always
	// be available though you can use it to update the participant
	// list when it is there.
	Participant *models.Participant `protobuf:"bytes,5,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (x *TrackUnpublished) Reset() {
	*x = TrackUnpublished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrackUnpublished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrackUnpublished) ProtoMessage() {}

func (x *TrackUnpublished) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrackUnpublished.ProtoReflect.Descriptor instead.
func (*TrackUnpublished) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{6}
}

func (x *TrackUnpublished) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *TrackUnpublished) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *TrackUnpublished) GetType() models.TrackType {
	if x != nil {
		return x.Type
	}
	return models.TrackType(0)
}

func (x *TrackUnpublished) GetCause() models.TrackUnpublishReason {
	if x != nil {
		return x.Cause
	}
	return models.TrackUnpublishReason(0)
}

func (x *TrackUnpublished) GetParticipant() *models.Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

// JoinRequest is sent by the participant to join a call. The
// call ID of the call should be encoded in the auth token.
type JoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// dumb SDP that allow us to extract subscriber's decode codecs
	SubscriberSdp string                `protobuf:"bytes,3,opt,name=subscriber_sdp,json=subscriberSdp,proto3" json:"subscriber_sdp,omitempty"`
	ClientDetails *models.ClientDetails `protobuf:"bytes,4,opt,name=client_details,json=clientDetails,proto3" json:"client_details,omitempty"`
}

func (x *JoinRequest) Reset() {
	*x = JoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinRequest) ProtoMessage() {}

func (x *JoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinRequest.ProtoReflect.Descriptor instead.
func (*JoinRequest) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{7}
}

func (x *JoinRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *JoinRequest) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *JoinRequest) GetSubscriberSdp() string {
	if x != nil {
		return x.SubscriberSdp
	}
	return ""
}

func (x *JoinRequest) GetClientDetails() *models.ClientDetails {
	if x != nil {
		return x.ClientDetails
	}
	return nil
}

// JoinResponse is sent as a confirmation of the participant joining the call
type JoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallState *models.CallState `protobuf:"bytes,1,opt,name=call_state,json=callState,proto3" json:"call_state,omitempty"`
}

func (x *JoinResponse) Reset() {
	*x = JoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinResponse) ProtoMessage() {}

func (x *JoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinResponse.ProtoReflect.Descriptor instead.
func (*JoinResponse) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{8}
}

func (x *JoinResponse) GetCallState() *models.CallState {
	if x != nil {
		return x.CallState
	}
	return nil
}

// ParticipantJoined is fired when a user joins a call
type ParticipantJoined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallCid     string              `protobuf:"bytes,1,opt,name=call_cid,json=callCid,proto3" json:"call_cid,omitempty"`
	Participant *models.Participant `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (x *ParticipantJoined) Reset() {
	*x = ParticipantJoined{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantJoined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantJoined) ProtoMessage() {}

func (x *ParticipantJoined) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantJoined.ProtoReflect.Descriptor instead.
func (*ParticipantJoined) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{9}
}

func (x *ParticipantJoined) GetCallCid() string {
	if x != nil {
		return x.CallCid
	}
	return ""
}

func (x *ParticipantJoined) GetParticipant() *models.Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

// ParticipantJoined is fired when a user leaves a call
type ParticipantLeft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CallCid     string              `protobuf:"bytes,1,opt,name=call_cid,json=callCid,proto3" json:"call_cid,omitempty"`
	Participant *models.Participant `protobuf:"bytes,2,opt,name=participant,proto3" json:"participant,omitempty"`
}

func (x *ParticipantLeft) Reset() {
	*x = ParticipantLeft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParticipantLeft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantLeft) ProtoMessage() {}

func (x *ParticipantLeft) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantLeft.ProtoReflect.Descriptor instead.
func (*ParticipantLeft) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{10}
}

func (x *ParticipantLeft) GetCallCid() string {
	if x != nil {
		return x.CallCid
	}
	return ""
}

func (x *ParticipantLeft) GetParticipant() *models.Participant {
	if x != nil {
		return x.Participant
	}
	return nil
}

// SubscriberOffer is sent when the SFU adds tracks to a subscription
type SubscriberOffer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IceRestart bool   `protobuf:"varint,1,opt,name=ice_restart,json=iceRestart,proto3" json:"ice_restart,omitempty"`
	Sdp        string `protobuf:"bytes,2,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *SubscriberOffer) Reset() {
	*x = SubscriberOffer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscriberOffer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscriberOffer) ProtoMessage() {}

func (x *SubscriberOffer) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscriberOffer.ProtoReflect.Descriptor instead.
func (*SubscriberOffer) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{11}
}

func (x *SubscriberOffer) GetIceRestart() bool {
	if x != nil {
		return x.IceRestart
	}
	return false
}

func (x *SubscriberOffer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

// PublisherAnswer is sent by the SFU as an answer to the publisher's offer
type PublisherAnswer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sdp string `protobuf:"bytes,1,opt,name=sdp,proto3" json:"sdp,omitempty"`
}

func (x *PublisherAnswer) Reset() {
	*x = PublisherAnswer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublisherAnswer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublisherAnswer) ProtoMessage() {}

func (x *PublisherAnswer) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublisherAnswer.ProtoReflect.Descriptor instead.
func (*PublisherAnswer) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{12}
}

func (x *PublisherAnswer) GetSdp() string {
	if x != nil {
		return x.Sdp
	}
	return ""
}

// ConnectionQuality is sent to inform about connection quality changes
// eg. thierry's connection is not good -> render a red icon Zoom style
type ConnectionQualityChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectionQualityUpdates []*ConnectionQualityInfo `protobuf:"bytes,1,rep,name=connection_quality_updates,json=connectionQualityUpdates,proto3" json:"connection_quality_updates,omitempty"`
}

func (x *ConnectionQualityChanged) Reset() {
	*x = ConnectionQualityChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionQualityChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionQualityChanged) ProtoMessage() {}

func (x *ConnectionQualityChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionQualityChanged.ProtoReflect.Descriptor instead.
func (*ConnectionQualityChanged) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{13}
}

func (x *ConnectionQualityChanged) GetConnectionQualityUpdates() []*ConnectionQualityInfo {
	if x != nil {
		return x.ConnectionQualityUpdates
	}
	return nil
}

type ConnectionQualityInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId            string                   `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId         string                   `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	ConnectionQuality models.ConnectionQuality `protobuf:"varint,3,opt,name=connection_quality,json=connectionQuality,proto3,enum=stream.video.sfu.models.ConnectionQuality" json:"connection_quality,omitempty"`
}

func (x *ConnectionQualityInfo) Reset() {
	*x = ConnectionQualityInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionQualityInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionQualityInfo) ProtoMessage() {}

func (x *ConnectionQualityInfo) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionQualityInfo.ProtoReflect.Descriptor instead.
func (*ConnectionQualityInfo) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{14}
}

func (x *ConnectionQualityInfo) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ConnectionQualityInfo) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *ConnectionQualityInfo) GetConnectionQuality() models.ConnectionQuality {
	if x != nil {
		return x.ConnectionQuality
	}
	return models.ConnectionQuality(0)
}

// DominantSpeakerChanged is sent by the SFU to notify when there is a new dominant speaker in the call
type DominantSpeakerChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
}

func (x *DominantSpeakerChanged) Reset() {
	*x = DominantSpeakerChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DominantSpeakerChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DominantSpeakerChanged) ProtoMessage() {}

func (x *DominantSpeakerChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DominantSpeakerChanged.ProtoReflect.Descriptor instead.
func (*DominantSpeakerChanged) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{15}
}

func (x *DominantSpeakerChanged) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DominantSpeakerChanged) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

type AudioLevel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// 0.0 means complete silence, 1.0 loudest
	Level      float32 `protobuf:"fixed32,3,opt,name=level,proto3" json:"level,omitempty"`
	IsSpeaking bool    `protobuf:"varint,4,opt,name=is_speaking,json=isSpeaking,proto3" json:"is_speaking,omitempty"`
}

func (x *AudioLevel) Reset() {
	*x = AudioLevel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioLevel) ProtoMessage() {}

func (x *AudioLevel) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioLevel.ProtoReflect.Descriptor instead.
func (*AudioLevel) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{16}
}

func (x *AudioLevel) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *AudioLevel) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *AudioLevel) GetLevel() float32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *AudioLevel) GetIsSpeaking() bool {
	if x != nil {
		return x.IsSpeaking
	}
	return false
}

// AudioLevelChanged is sent by the SFU to notify about audio levels by user
type AudioLevelChanged struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioLevels []*AudioLevel `protobuf:"bytes,1,rep,name=audio_levels,json=audioLevels,proto3" json:"audio_levels,omitempty"`
}

func (x *AudioLevelChanged) Reset() {
	*x = AudioLevelChanged{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AudioLevelChanged) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioLevelChanged) ProtoMessage() {}

func (x *AudioLevelChanged) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioLevelChanged.ProtoReflect.Descriptor instead.
func (*AudioLevelChanged) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{17}
}

func (x *AudioLevelChanged) GetAudioLevels() []*AudioLevel {
	if x != nil {
		return x.AudioLevels
	}
	return nil
}

type VideoLayerSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Active bool   `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *VideoLayerSetting) Reset() {
	*x = VideoLayerSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoLayerSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoLayerSetting) ProtoMessage() {}

func (x *VideoLayerSetting) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoLayerSetting.ProtoReflect.Descriptor instead.
func (*VideoLayerSetting) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{18}
}

func (x *VideoLayerSetting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VideoLayerSetting) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type VideoSender struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codec  *models.Codec        `protobuf:"bytes,2,opt,name=codec,proto3" json:"codec,omitempty"`
	Layers []*VideoLayerSetting `protobuf:"bytes,3,rep,name=layers,proto3" json:"layers,omitempty"`
}

func (x *VideoSender) Reset() {
	*x = VideoSender{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VideoSender) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoSender) ProtoMessage() {}

func (x *VideoSender) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoSender.ProtoReflect.Descriptor instead.
func (*VideoSender) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{19}
}

func (x *VideoSender) GetCodec() *models.Codec {
	if x != nil {
		return x.Codec
	}
	return nil
}

func (x *VideoSender) GetLayers() []*VideoLayerSetting {
	if x != nil {
		return x.Layers
	}
	return nil
}

// sent to users when they need to change the quality of their video
type ChangePublishQuality struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VideoSenders []*VideoSender `protobuf:"bytes,2,rep,name=video_senders,json=videoSenders,proto3" json:"video_senders,omitempty"`
}

func (x *ChangePublishQuality) Reset() {
	*x = ChangePublishQuality{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePublishQuality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePublishQuality) ProtoMessage() {}

func (x *ChangePublishQuality) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePublishQuality.ProtoReflect.Descriptor instead.
func (*ChangePublishQuality) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{20}
}

func (x *ChangePublishQuality) GetVideoSenders() []*VideoSender {
	if x != nil {
		return x.VideoSenders
	}
	return nil
}

// CallGrants is sent to users when there is a change in the call permissions
// to publish audio, video or share the screen for a user or a role. This is
// idempotent and can be sent at any time. Only the current_grants in the latest
// message should be considered. In other words, this is not dependent on any
// other message (including previous call_grants_updated message)
//
// When this message is received, the client (say, React component) should mute
// the tracks which are not allowed anymore. For example, if the message has
// grants {audio:true, video:false} while the user is publishing video, then the
// client component should mute the video track and gray out the video button.
// This way, the user will not be able to publish video until the permissions
// are granted again. Also, muting the track on the client side will prevent
// the SFU from receiving the video track and will save bandwidth.
//
// In simple words, this is exactly the same as muting a track on the client.
// Here, instead of the user instructing the client, SFU would be doing it.
type CallGrantsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentGrants *models.CallGrants `protobuf:"bytes,1,opt,name=current_grants,json=currentGrants,proto3" json:"current_grants,omitempty"`
	Message       string             `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *CallGrantsUpdated) Reset() {
	*x = CallGrantsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_video_sfu_event_events_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallGrantsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallGrantsUpdated) ProtoMessage() {}

func (x *CallGrantsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_video_sfu_event_events_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallGrantsUpdated.ProtoReflect.Descriptor instead.
func (*CallGrantsUpdated) Descriptor() ([]byte, []int) {
	return file_video_sfu_event_events_proto_rawDescGZIP(), []int{21}
}

func (x *CallGrantsUpdated) GetCurrentGrants() *models.CallGrants {
	if x != nil {
		return x.CurrentGrants
	}
	return nil
}

func (x *CallGrantsUpdated) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_video_sfu_event_events_proto protoreflect.FileDescriptor

var file_video_sfu_event_events_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x73, 0x66, 0x75, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x1d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x73, 0x66,
	0x75, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2, 0x0a, 0x0a, 0x08, 0x53, 0x66, 0x75, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x54, 0x0a, 0x10, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x5f, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x10, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x48, 0x00, 0x52, 0x0f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x70,
	0x0a, 0x1a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x12, 0x5b, 0x0a, 0x13, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x46, 0x0a,
	0x0b, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x49, 0x43, 0x45,
	0x54, 0x72, 0x69, 0x63, 0x6b, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x63, 0x65, 0x54, 0x72,
	0x69, 0x63, 0x6b, 0x6c, 0x65, 0x12, 0x64, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x12, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4a, 0x6f, 0x69, 0x6e,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f,
	0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x6a, 0x0a,
	0x18, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x65,
	0x72, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73,
	0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e,
	0x74, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x16, 0x64, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x61, 0x6b,
	0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76,
	0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x51, 0x0a, 0x0f, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x57, 0x0a, 0x11,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x5f, 0x75, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5b, 0x0a, 0x13,
	0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x63, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x6e,
	0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x0f, 0x0a, 0x0d, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x3d, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xc9, 0x01, 0x0a, 0x0a, 0x53, 0x66,
	0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66,
	0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x5e, 0x0a, 0x14, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6d, 0x0a, 0x13, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x56, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x0e, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64,
	0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65,
	0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x8f, 0x02, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55,
	0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x05, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x55, 0x6e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69,
	0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x0b, 0x4a, 0x6f, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72, 0x5f, 0x73, 0x64, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x72,
	0x53, 0x64, 0x70, 0x12, 0x4d, 0x0a, 0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x22, 0x51, 0x0a, 0x0c, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x63, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x76, 0x0a, 0x11, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61,
	0x6c, 0x6c, 0x43, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x22, 0x74, 0x0a,
	0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x6c, 0x6c, 0x43, 0x69, 0x64, 0x12, 0x46, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x52, 0x0b, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x22, 0x44, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x72, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x64, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22, 0x23, 0x0a, 0x0f, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x64, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x64, 0x70, 0x22, 0x87,
	0x01, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x6b, 0x0a, 0x1a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73,
	0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x18,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x59, 0x0a, 0x12, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x50, 0x0a, 0x16, 0x44, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6e,
	0x74, 0x53, 0x70, 0x65, 0x61, 0x6b, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x7b, 0x0a, 0x0a, 0x41, 0x75, 0x64, 0x69, 0x6f,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x61, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x53, 0x70, 0x65, 0x61,
	0x6b, 0x69, 0x6e, 0x67, 0x22, 0x5a, 0x0a, 0x11, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0c, 0x61, 0x75, 0x64,
	0x69, 0x6f, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73,
	0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x0b, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x73,
	0x22, 0x3f, 0x0a, 0x11, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x22, 0x86, 0x01, 0x0a, 0x0b, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x12, 0x34, 0x0a, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x63,
	0x52, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x60, 0x0a, 0x14, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x51, 0x75, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x48, 0x0a, 0x0d, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x73, 0x65, 0x6e, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0c,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x22, 0x79, 0x0a, 0x11,
	0x43, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x61,
	0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2e, 0x73, 0x66, 0x75, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x0d,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x5d, 0x42, 0x0b, 0x53, 0x66, 0x75, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x56, 0x31, 0x50, 0x01, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x2f, 0x73, 0x66, 0x75, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0xaa, 0x02, 0x13, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x66, 0x75, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_video_sfu_event_events_proto_rawDescOnce sync.Once
	file_video_sfu_event_events_proto_rawDescData = file_video_sfu_event_events_proto_rawDesc
)

func file_video_sfu_event_events_proto_rawDescGZIP() []byte {
	file_video_sfu_event_events_proto_rawDescOnce.Do(func() {
		file_video_sfu_event_events_proto_rawDescData = protoimpl.X.CompressGZIP(file_video_sfu_event_events_proto_rawDescData)
	})
	return file_video_sfu_event_events_proto_rawDescData
}

var file_video_sfu_event_events_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_video_sfu_event_events_proto_goTypes = []interface{}{
	(*SfuEvent)(nil),                 // 0: stream.video.sfu.event.SfuEvent
	(*Error)(nil),                    // 1: stream.video.sfu.event.Error
	(*SfuRequest)(nil),               // 2: stream.video.sfu.event.SfuRequest
	(*HealthCheckRequest)(nil),       // 3: stream.video.sfu.event.HealthCheckRequest
	(*HealthCheckResponse)(nil),      // 4: stream.video.sfu.event.HealthCheckResponse
	(*TrackPublished)(nil),           // 5: stream.video.sfu.event.TrackPublished
	(*TrackUnpublished)(nil),         // 6: stream.video.sfu.event.TrackUnpublished
	(*JoinRequest)(nil),              // 7: stream.video.sfu.event.JoinRequest
	(*JoinResponse)(nil),             // 8: stream.video.sfu.event.JoinResponse
	(*ParticipantJoined)(nil),        // 9: stream.video.sfu.event.ParticipantJoined
	(*ParticipantLeft)(nil),          // 10: stream.video.sfu.event.ParticipantLeft
	(*SubscriberOffer)(nil),          // 11: stream.video.sfu.event.SubscriberOffer
	(*PublisherAnswer)(nil),          // 12: stream.video.sfu.event.PublisherAnswer
	(*ConnectionQualityChanged)(nil), // 13: stream.video.sfu.event.ConnectionQualityChanged
	(*ConnectionQualityInfo)(nil),    // 14: stream.video.sfu.event.ConnectionQualityInfo
	(*DominantSpeakerChanged)(nil),   // 15: stream.video.sfu.event.DominantSpeakerChanged
	(*AudioLevel)(nil),               // 16: stream.video.sfu.event.AudioLevel
	(*AudioLevelChanged)(nil),        // 17: stream.video.sfu.event.AudioLevelChanged
	(*VideoLayerSetting)(nil),        // 18: stream.video.sfu.event.VideoLayerSetting
	(*VideoSender)(nil),              // 19: stream.video.sfu.event.VideoSender
	(*ChangePublishQuality)(nil),     // 20: stream.video.sfu.event.ChangePublishQuality
	(*CallGrantsUpdated)(nil),        // 21: stream.video.sfu.event.CallGrantsUpdated
	(*models.ICETrickle)(nil),        // 22: stream.video.sfu.models.ICETrickle
	(*models.Error)(nil),             // 23: stream.video.sfu.models.Error
	(*models.ParticipantCount)(nil),  // 24: stream.video.sfu.models.ParticipantCount
	(models.TrackType)(0),            // 25: stream.video.sfu.models.TrackType
	(*models.Participant)(nil),       // 26: stream.video.sfu.models.Participant
	(models.TrackUnpublishReason)(0), // 27: stream.video.sfu.models.TrackUnpublishReason
	(*models.ClientDetails)(nil),     // 28: stream.video.sfu.models.ClientDetails
	(*models.CallState)(nil),         // 29: stream.video.sfu.models.CallState
	(models.ConnectionQuality)(0),    // 30: stream.video.sfu.models.ConnectionQuality
	(*models.Codec)(nil),             // 31: stream.video.sfu.models.Codec
	(*models.CallGrants)(nil),        // 32: stream.video.sfu.models.CallGrants
}
var file_video_sfu_event_events_proto_depIdxs = []int32{
	11, // 0: stream.video.sfu.event.SfuEvent.subscriber_offer:type_name -> stream.video.sfu.event.SubscriberOffer
	12, // 1: stream.video.sfu.event.SfuEvent.publisher_answer:type_name -> stream.video.sfu.event.PublisherAnswer
	13, // 2: stream.video.sfu.event.SfuEvent.connection_quality_changed:type_name -> stream.video.sfu.event.ConnectionQualityChanged
	17, // 3: stream.video.sfu.event.SfuEvent.audio_level_changed:type_name -> stream.video.sfu.event.AudioLevelChanged
	22, // 4: stream.video.sfu.event.SfuEvent.ice_trickle:type_name -> stream.video.sfu.models.ICETrickle
	20, // 5: stream.video.sfu.event.SfuEvent.change_publish_quality:type_name -> stream.video.sfu.event.ChangePublishQuality
	9,  // 6: stream.video.sfu.event.SfuEvent.participant_joined:type_name -> stream.video.sfu.event.ParticipantJoined
	10, // 7: stream.video.sfu.event.SfuEvent.participant_left:type_name -> stream.video.sfu.event.ParticipantLeft
	15, // 8: stream.video.sfu.event.SfuEvent.dominant_speaker_changed:type_name -> stream.video.sfu.event.DominantSpeakerChanged
	8,  // 9: stream.video.sfu.event.SfuEvent.join_response:type_name -> stream.video.sfu.event.JoinResponse
	4,  // 10: stream.video.sfu.event.SfuEvent.health_check_response:type_name -> stream.video.sfu.event.HealthCheckResponse
	5,  // 11: stream.video.sfu.event.SfuEvent.track_published:type_name -> stream.video.sfu.event.TrackPublished
	6,  // 12: stream.video.sfu.event.SfuEvent.track_unpublished:type_name -> stream.video.sfu.event.TrackUnpublished
	1,  // 13: stream.video.sfu.event.SfuEvent.error:type_name -> stream.video.sfu.event.Error
	21, // 14: stream.video.sfu.event.SfuEvent.call_grants_updated:type_name -> stream.video.sfu.event.CallGrantsUpdated
	23, // 15: stream.video.sfu.event.Error.error:type_name -> stream.video.sfu.models.Error
	7,  // 16: stream.video.sfu.event.SfuRequest.join_request:type_name -> stream.video.sfu.event.JoinRequest
	3,  // 17: stream.video.sfu.event.SfuRequest.health_check_request:type_name -> stream.video.sfu.event.HealthCheckRequest
	24, // 18: stream.video.sfu.event.HealthCheckResponse.participant_count:type_name -> stream.video.sfu.models.ParticipantCount
	25, // 19: stream.video.sfu.event.TrackPublished.type:type_name -> stream.video.sfu.models.TrackType
	26, // 20: stream.video.sfu.event.TrackPublished.participant:type_name -> stream.video.sfu.models.Participant
	25, // 21: stream.video.sfu.event.TrackUnpublished.type:type_name -> stream.video.sfu.models.TrackType
	27, // 22: stream.video.sfu.event.TrackUnpublished.cause:type_name -> stream.video.sfu.models.TrackUnpublishReason
	26, // 23: stream.video.sfu.event.TrackUnpublished.participant:type_name -> stream.video.sfu.models.Participant
	28, // 24: stream.video.sfu.event.JoinRequest.client_details:type_name -> stream.video.sfu.models.ClientDetails
	29, // 25: stream.video.sfu.event.JoinResponse.call_state:type_name -> stream.video.sfu.models.CallState
	26, // 26: stream.video.sfu.event.ParticipantJoined.participant:type_name -> stream.video.sfu.models.Participant
	26, // 27: stream.video.sfu.event.ParticipantLeft.participant:type_name -> stream.video.sfu.models.Participant
	14, // 28: stream.video.sfu.event.ConnectionQualityChanged.connection_quality_updates:type_name -> stream.video.sfu.event.ConnectionQualityInfo
	30, // 29: stream.video.sfu.event.ConnectionQualityInfo.connection_quality:type_name -> stream.video.sfu.models.ConnectionQuality
	16, // 30: stream.video.sfu.event.AudioLevelChanged.audio_levels:type_name -> stream.video.sfu.event.AudioLevel
	31, // 31: stream.video.sfu.event.VideoSender.codec:type_name -> stream.video.sfu.models.Codec
	18, // 32: stream.video.sfu.event.VideoSender.layers:type_name -> stream.video.sfu.event.VideoLayerSetting
	19, // 33: stream.video.sfu.event.ChangePublishQuality.video_senders:type_name -> stream.video.sfu.event.VideoSender
	32, // 34: stream.video.sfu.event.CallGrantsUpdated.current_grants:type_name -> stream.video.sfu.models.CallGrants
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_video_sfu_event_events_proto_init() }
func file_video_sfu_event_events_proto_init() {
	if File_video_sfu_event_events_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_video_sfu_event_events_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SfuEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SfuRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackPublished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrackUnpublished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantJoined); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParticipantLeft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscriberOffer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublisherAnswer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionQualityChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionQualityInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DominantSpeakerChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioLevel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AudioLevelChanged); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoLayerSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VideoSender); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangePublishQuality); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_video_sfu_event_events_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallGrantsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_video_sfu_event_events_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SfuEvent_SubscriberOffer)(nil),
		(*SfuEvent_PublisherAnswer)(nil),
		(*SfuEvent_ConnectionQualityChanged)(nil),
		(*SfuEvent_AudioLevelChanged)(nil),
		(*SfuEvent_IceTrickle)(nil),
		(*SfuEvent_ChangePublishQuality)(nil),
		(*SfuEvent_ParticipantJoined)(nil),
		(*SfuEvent_ParticipantLeft)(nil),
		(*SfuEvent_DominantSpeakerChanged)(nil),
		(*SfuEvent_JoinResponse)(nil),
		(*SfuEvent_HealthCheckResponse)(nil),
		(*SfuEvent_TrackPublished)(nil),
		(*SfuEvent_TrackUnpublished)(nil),
		(*SfuEvent_Error)(nil),
		(*SfuEvent_CallGrantsUpdated)(nil),
	}
	file_video_sfu_event_events_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SfuRequest_JoinRequest)(nil),
		(*SfuRequest_HealthCheckRequest)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_video_sfu_event_events_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_video_sfu_event_events_proto_goTypes,
		DependencyIndexes: file_video_sfu_event_events_proto_depIdxs,
		MessageInfos:      file_video_sfu_event_events_proto_msgTypes,
	}.Build()
	File_video_sfu_event_events_proto = out.File
	file_video_sfu_event_events_proto_rawDesc = nil
	file_video_sfu_event_events_proto_goTypes = nil
	file_video_sfu_event_events_proto_depIdxs = nil
}
