package {{index .Additional "package"}}

import (
  "time"
)

{{/* this make imports valid even if time package is not needed in this file */}}
var _ = time.Time{}

{{- define "generateObject"}} struct {
  {{- $struct := . -}}
  {{- range $key, $value := $struct.Properties}}
    {{- if $value.Value.Description}} 
    // {{$value.Value.Description}}
    {{- end}}
    {{toCamel $key}}{{if has $struct.Required $key}} {{template "generateType" $value}} `json:"{{$key}}"` {{- else}} *{{template "generateType" $value}} `json:"{{$key}},omitempty"`
  {{- end}}

{{- end}}
}
{{- end}}

{{- define "generateType"}}
    {{- if (eq .Ref "") -}}
        {{- if (eq .Value.Type "string")}}
          {{- if (eq .Value.Format "date-time")}}time.Time{{- else}}string{{- end}}
        {{- else if (eq .Value.Type "integer")}}int
        {{- else if (eq .Value.Type "number")}}float64 
        {{- else if (eq .Value.Type "boolean")}}bool 
        {{- else if (eq .Value.Type "array")}}[]{{template "generateType" .Value.Items}}
        {{- else if (eq .Value.Type "object")}}
           {{- if .Value.AdditionalProperties}}map[string]interface{}
           {{- else}}{{template "generateObject" .Value}}
           {{- end }}
        {{- else if (eq .Value.Type "null")}}interface{} 
        {{- end}}
    {{- else -}}{{refToName .Ref}}
    {{- end}}
{{- end}}

type {{.Name}}{{template "generateObject" .Schema}} 
