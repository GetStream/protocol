{{- define "requestFunction" -}}
def {{toSnake .OperationID}}(self{{range $index, $param := (requiredParameters .Parameters) -}}
, {{$param.Value.Name}}: {{if .Value.Content -}}{{template "generateSchemaRef" (index .Value.Content "application/json").Schema}}{{else}}{{template "generateSchemaRef" .Value.Schema}}{{- end -}}{{end -}}
{{- with (requestSchema .Operation) -}}, data: {{template "generateSchemaRef" .}}{{end -}}
{{range $index, $param := (optionalParameters .Parameters) -}}
, {{$param.Value.Name}}: Optional[{{if .Value.Content -}}{{template "generateSchemaRef" (index .Value.Content "application/json").Schema}}{{else}}{{template "generateSchemaRef" .Value.Schema}}{{- end -}}] = None{{end -}}
){{with (successfulResponse .Responses)}} -> StreamResponse[{{template "generateSchemaRef" .}}]{{end}}:
        """
        {{.Summary}}
        {{- range $index, $param := .Parameters -}}
        {{- if $param.Value.Description}}:param {{$param.Value.Name}}:{{$param.Value.Summary}}
        {{end}}
        {{- end}}
        """
        query_params = {}
        path_params = {}

        {{- range $index, $param := .Parameters -}}
        {{- if eq $param.Value.In "query"}}
        query_params["{{$param.Value.Name}}"] = {{toSnake $param.Value.Name}} 
        {{- else if eq $param.Value.In "path"}}
        path_params["{{$param.Value.Name}}"] = {{toSnake $param.Value.Name}}
        {{- end}}
        {{- end}}

        self.request("{{.Method}}", "{{.Path}}",
                query_params=query_params,
                path_params=path_params{{- if (requestSchema .Operation)}},
                body=data{{end -}}
        )

{{ end -}}