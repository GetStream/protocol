{{- define "requestFunction" -}}

def {{toSnake .Operation.OperationID}}(self,
{{- range $index, $param := (requiredParameters .Operation.Parameters) -}}
{{$param.Value.Name}}: {{if .Value.Content -}}{{template "generateSchemaRef" (index .Value.Content "application/json").Schema}}{{else}}{{template "generateSchemaRef" .Value.Schema}}{{- end -}},{{- end -}}

{{- range $name, $property := .RequestProperties -}}
        {{- $name -}}: {{ if $property.Optional }} Optional[{{ $property.PropType.Ref }}] {{else}}{{ $property.PropType.Ref }} {{- end -}},
 
    {{- end -}}
{{- range $index, $param := (optionalParameters .Operation.Parameters) -}}
{{$param.Value.Name}}: Optional[{{if .Value.Content -}}{{template "generateSchemaRef" (index .Value.Content "application/json").Schema}}{{else}}{{template "generateSchemaRef" .Value.Schema}}{{- end -}}] = None,{{end -}}
**kwargs
){{with (successfulResponse .Operation.Responses)}} -> StreamResponse[{{template "generateSchemaRef" .}}]{{end}}:
        """
        {{.Operation.Summary}}
        {{- range $index, $param := .Operation.Parameters -}}
        {{- if $param.Value.Description}}:param {{$param.Value.Name}}:{{$param.Value.Summary}}
        {{end}}
        {{- end}}
        """
        query_params = {}
        path_params = {}
        {{- if gt (len .RequestProperties) 0 }}
        json = {} {{- end}}

        {{- range $index, $param := .Operation.Parameters -}}
        {{- if eq $param.Value.In "query"}}
        query_params["{{$param.Value.Name}}"] = {{toSnake $param.Value.Name}} 
        {{- else if eq $param.Value.In "path"}}
        path_params["{{$param.Value.Name}}"] = {{toSnake $param.Value.Name}}
        {{- end}}
        {{- end}}

        {{- range $name, $property := .RequestProperties -}}
        {{- if $property.Optional}} 
        if {{$name}} is not None:
        
        {{- if $property.PropType.IsRef}}
            json["{{$name}}"] = {{$name}}.to_dict()
        {{- else}}
            json["{{$name}}"] = {{$name}}
        {{- end}}
        json["{{$name}}"] = {{$name}}
        {{- end}}
        {{- end }}

        return self.{{.Method | lower}}("{{.Path}}",
         {{with (successfulResponse .Operation.Responses)}} {{template "generateSchemaRef" .}},{{end}}
                query_params=query_params,
                path_params=path_params{{- if (requestSchema .Operation)}},
                json=json.to_dict(){{end -}}
        )

{{ end -}}

{{- define "operationFunction" -}}
    {{ $op := .Operation.OperationID | toSnake }}
    def {{ $op }}(self,

{{- range $name, $property := .RequestProperties -}}
       {{ $name }}: {{ if $property.Optional }} Optional[{{ $property.PropType.Ref }}] {{else}}{{ $property.PropType.Ref }} {{end}},
    {{ end }}
{{range $index, $param := (optionalParameters .Operation.Parameters) -}}
{{$param.Value.Name}}: Optional[{{if .Value.Content -}}{{template "generateSchemaRef" (index .Value.Content "application/json").Schema}}{{else}}{{template "generateSchemaRef" .Value.Schema}}{{- end -}}] = None,{{end -}}

){{with (successfulResponse .Operation.Responses)}} -> StreamResponse[{{template "generateSchemaRef" .}}]{{end}}:
        """
        {{.Operation.Summary}}
        {{- range $index, $param := .Operation.Parameters -}}
        {{- if $param.Value.Description}}:param {{$param.Value.Name}}:{{$param.Value.Summary}}
        {{end}}
        {{- end}}
        """
        return self._client.{{ $op }}(self._type, self._id{{ if (requestSchema .Operation) }}, {{end}}{{range $index, $param := (optionalParameters .Operation.Parameters) -}}
{{$param.Value.Name}}{{end}})
{{ end -}}

