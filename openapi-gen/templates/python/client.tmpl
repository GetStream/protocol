# THIS FILE IS GENERATED FROM github.com/GetStream/protocol/tree/main/openapi-gen/templates/python/client.tmpl
from getstream.stream_response import StreamResponse
from getstream.sync.base import BaseClient
from typing import Optional
{{- range $i, $ref := (clientReferences .Doc.Paths)}}
from {{with index additionalParameters "modelImportPrefix"}}{{.}}{{else}}models.{{end}}models.{{refToName $ref | toSnake}} import {{refToName $ref | toCamel}}
{{- end}}

{{ $types:=.TypeContexts}}

{{/* TODO: make class name configurable */ -}}
class {{with index additionalParameters "clientClassName"}}{{.}}{{else}}Client{{end}}(BaseClient):
    def __init__(self, api_key: str, base_url, token, timeout, user_agent):
        """
        Initializes VideoClient with BaseClient instance
        :param api_key: A string representing the client's API key
        :param base_url: A string representing the base uniform resource locator
        :param token: A string instance representing the client's token
        :param timeout: A number representing the time limit for a request
        :param user_agent: A string representing the user agent
        """
        super().__init__(
          api_key=api_key,
          base_url=base_url,
          token=token,
          timeout=timeout,
          user_agent=user_agent,
        )

{{/* TODO: detect convenient class  */}}

    def call(self, type: str, id: str):
      """
      Returns instance of Call class
      param type: A string representing the call type
      :param id: A string representing a unique call identifier
      :return: Instance of Call class
      """
      return Call(self, type, id)   

    {{- range $path, $item := .Doc.Paths -}}{{- range $method, $operation := $item.Operations}}    
    {{template "requestFunction" (operationContext $operation $method $path $types )}}
    {{- end -}}
    
    {{- end -}}

{{/* TODO: detect convenient class  */}}

class Call:
    def __init__(self, client: VideoClient, type: str, id: str):
        """
        Initializes Call with BaseClient instance
        :param client: An instance of BaseClient class
        :param type: A string representing the call type
        :param id: A string representing a unique call identifier
        """
        self._client = client
        self._type = type
        self._id = id

    {{- range $path, $item := .Doc.Paths -}}{{- range $method, $operation := $item.Operations}}    
        {{- template "operationFunction" (operationContext $operation $method $path $types)}}
    {{- end -}}{{- end -}}

{{define "operationFunction"}}
    def {{.operation.operationId}}(
        self, {{- range $param := .operation.parameters -}} 
        {{- if eq $param.in "body" -}}
      {{- range $propName, $prop := $param.schema.properties}}
      {{ $propName}}:{{ $prop.type }}, 
      {{- end -}}
      {{- end -}}
      {{- end -}}
    ) -> StreamResponse[{{template "generateSchemaRef" .}}]:
        """
        :param {{range $param := .operation.parameters }}{{ if eq $param.in "body" }}{{ range $propName, $prop := $param.schema.properties }}{{ $propName }}:{{ end }}{{ end }}{{ end }}A dictionary with call details
        :return: Response from {{.operation.operationId}} API
        """
        {{ if gt (len .operation.parameters) 0 -}}
        return self._client.{{.operation.operationId}}(self._type, self._id, {{range $param := .operation.parameters}}{{if eq $param.in "body"}}{{ $param.name }}{{end}}{{end}})
        {{ else -}}
        return self._client.{{.operation.operationId}}(self._type, self._id)
        {{ end -}}
{{end}}