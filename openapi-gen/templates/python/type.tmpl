{{- $required := .Schema.Required}}
{{- $hasNonRequired := false }}
{{- $hasDateTime := false }}
{{- range $index, $value := sortedProperties .Schema}}
    {{- if and (eq .Value.Type "string") (eq .Value.Format "date-time")}}
        {{- $hasDateTime = true }}
    {{- end}}
    {{- if or $required $value.Required}}
    {{- else}}
        {{- $hasNonRequired = true}}
    {{- end}}
{{- end}}
from dataclasses import dataclass, field
{{- if $hasNonRequired}}from typing import Optional{{- end}}
{{- if $hasDateTime}}from datetime import datetime{{- end}}
{{- if (gt (len .Schema.OneOf) 0)}}
from typing import Union
from json import loads
{{else}}
from dataclasses_json import config, dataclass_json
{{- end}}

{{- range $i, $ref := .References}}
from {{with index additionalParameters "modelImportPrefix"}}{{.}}{{else}}models.{{end}}models.{{refToName $ref | toSnake}} import {{refToName $ref | toCamel}}
{{- end -}}

{{- define "generateType" -}}
{{- if (eq .Type "string")}}
    {{- if (eq .Format "date-time") -}}datetime{{- else -}}str{{- end -}}
{{- end -}}
{{- if (eq .Type "integer")}}int{{end}}
{{- if (eq .Type "number")}}float{{end}}
{{- if (eq .Type "boolean")}}bool{{end}}
{{- if (eq .Type "array")}}list[{{template "generateSchemaRef" .Items -}}]{{end}}
{{- if (eq .Type "object")}}{{with .AdditionalProperties}}dict[str, {{template "generateSchemaRef" .Schema -}}]{{end}}{{end}}
{{- if (eq .Type "null")}}None{{end}}
{{- if (eq .Type "")}}object{{end}}
{{- end -}}

{{- define "generateSchemaRef" -}}
{{- if .}}
{{- if (eq .Ref "") -}}{{- template "generateType" .Value -}}{{- else -}}{{refToName .Ref | toCamel}}{{- end -}}
{{- end -}}
{{- end}}

{{- with .Schema.Discriminator}}
mapping = {
    {{- range $key, $one := .Mapping}}
    "{{$key}}": {{refToName $one | toCamel}},
    {{- end}}
}

{{else}}
@dataclass_json
{{end -}}
@dataclass
class {{toCamel .Name}}:
    {{- if (gt (len .Schema.Properties) 0)}} 
    {{- $required := .Schema.Required}}
    {{- range $index, $value := sortedProperties .Schema}}
    {{toSnake $value.Name}}: {{if and $value.Required $value.SchemaRef -}} {{template "generateSchemaRef" $value.SchemaRef}} = field(metadata=config(field_name="{{$value.Name}}")) {{- else -}} Optional[{{template "generateSchemaRef" $value.SchemaRef}}] = field(metadata=config(field_name="{{$value.Name}}"), default=None) {{- end -}}
    {{- end}}
    {{else if (gt (len .Schema.OneOf) 0)}}
    event : Union[
    {{- range $i, $one := .Schema.OneOf}}
        {{- if (gt $i 0)}},{{end}}
        {{template "generateSchemaRef" $one}}
    {{- end}}
    ]

    @classmethod
    def from_json(j) -> '{{toCamel .Name}}':
        dict_type = loads(j)["{{.Schema.Discriminator.PropertyName}}"]
        return {{toCamel .Name}}(event=mapping[dict_type].from_json(j))
    {{- else}}
    
    {{- end}}

