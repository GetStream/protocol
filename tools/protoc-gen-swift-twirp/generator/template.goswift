// Generated by protoc-gen-siwft-twirp. DO NOT EDIT
{{- range .Imports}}
import {{.Path}};
{{- end}}

{{range .Services}}
class {{.ClassName}}: @unchecked Sendable {
	private let httpClient: HTTPClient
	let hostname: String
	var token: String
	let apiKey: String
    let syncQueue = DispatchQueue(label: "{{.ClassName}}", qos: .userInitiated)
	let pathPrefix: String = "/{{.Package}}.{{.Name}}/"
	init(httpClient: HTTPClient, apiKey: String, hostname: String, token: String) {
        self.httpClient = httpClient
		self.hostname = hostname
		self.token = token
        self.apiKey = apiKey
	}
    {{range .Methods}}
	func {{.Name}}({{.InputArg}}: {{.InputType}}) async throws -> {{.OutputType}} {
        return try await execute(request: {{.InputArg}}, path: "{{.Path}}")
	}
    {{end}}
    func update(userToken: String) {
        syncQueue.async { [weak self] in
            self?.token = userToken
        }
    }

    private func execute<Request: ProtoModel, Response: ProtoModel>(request: Request, path: String) async throws -> Response {
        let requestData = try request.serializedData()
        var request = try makeRequest(for: path)
        request.httpBody = requestData
        let responseData = try await httpClient.execute(request: request)
        let response = try Response.init(serializedData: responseData)
        return response
    }

    private func makeRequest(for path: String) throws -> URLRequest {
    	let url = hostname + pathPrefix + path + "?api_key=\(apiKey)"
        guard let url = URL(string: url) else {
            throw NSError(domain: "stream", code: 123)
        }
        var request = URLRequest(url: url)
        request.setValue("application/protobuf", forHTTPHeaderField: "Content-Type")
        request.setValue("Bearer \(token)", forHTTPHeaderField: "authorization")
        request.httpMethod = "POST"
        return request
    }
}
{{end}}
